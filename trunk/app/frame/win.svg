<?xml version="1.0" standalone="yes"?>
<svg xmlns = "http://www.w3.org/2000/svg">
<script type="text/javascript">
	<![CDATA[
	
	xmlns = "http://www.w3.org/2000/svg";
	xlink = "http://www.w3.org/1999/xlink";
	
	function $e(i){ return document.createElementNS(xmlns, i); }
	function Class(){ return function(arguments){ this.init(arguments); } }
	function setAttrs(obj, values){ for (i in values) { obj.setAttributeNS(null, i, values[i]); } }
	function randColor(){ return "rgb(" + parseInt(Math.random() * 255) + "," + parseInt(Math.random() * 255) + "," + parseInt(Math.random() * 255) + ")"; }
	
	var JSVG = new Class();
	
	JSVG.prototype = {
	
		root: null,
		designArea:null,
		coords:null,
		selectedObj: null,

		/** Constructor */
		init: function(){
			
			this.root = document.documentElement;
			JSVG.root = this.root;
	
			this.coords = this.root.createSVGPoint();
         	this.grabPoint = this.root.createSVGPoint();

			this.buildMenu();
			this.buildDesignArea();
		},
		
		/** Builds the design area and adds event listeners. */
		buildDesignArea: function(){

			var self = this;
	
			this.designArea = new this.Element('rect', { "height": "100%", "width": "85%", "x": "15%", "y": 0, "fill": "#eee", "id": "designArea" });
			
			// Drag and drop listeners
			this.designArea.addEventListener('mousemove', function(evt){ self.drag(evt); },false);
			this.designArea.addEventListener('mouseup', function(evt){ self.drop(evt); },false);
			// Add elements listener
			this.designArea.addEventListener('click',function(evt){ self.drawElement(evt); },false);
						
		},
		
		/**
		 * Draw an element depending on the selected form
		 * @param {Object} evt
		 */
		drawElement: function(evt){
		
			var self = this;
			
			switch(this.selectedObj) {
				
				// Creates a rectangle in the design area
				case 'rect':
				
					new this.Element('rect', {
						"height": "5em",
						"width": "5em",
						"x": evt.clientX,
						"y": evt.clientY,
						"fill": "#ff0000",
						"id": this.toString()
						
					}).addEventListener('mousedown', function(evt){ self.grab(evt); }, false);
					
				break;
				
				// Creates a circle in the design area
				case 'circle':
				
					new self.Element('circle', {
							"r": "2.5em",
							"cx": evt.clientX,
							"cy": evt.clientY,
							"fill": "#ddd",
							"fill-opacity": 0.85,
							"stroke": "#000",
							"stroke-opacity": 0.85
					}).addEventListener('mousedown', function(evt){ self.grab(evt); }, false);
									
				break;
			}
		},

		/**
		 * Set the element to be dragged.
		 * @param {Object} evt
		 */
		grab: function(evt){

			var targetElement = evt.target;
			
			if (this.designArea != targetElement) {

				this.selectedObj = targetElement;
				setAttrs(targetElement, {"fill-opacity": 0.5});
								
				// Calculates the element's coords
	            var transMatrix = targetElement.getCTM();
				this.getCoords(evt);
	            this.grabPoint.x = this.coords.x - Number(transMatrix.e);
	            this.grabPoint.y = this.coords.y - Number(transMatrix.f);
				
				// Set out target
				this.dragElement = targetElement;
				//this.dragElement.parentNode.appendChild(this.dragElement);
				this.dragElement.setAttributeNS(null, 'pointer-events', 'none');

			}
		},

		/**
		 * Drag the element throught the design area
		 * @param {Object} evt
		 */
		drag: function(evt){

	         if (this.dragElement) {
			 	this.getCoords(evt);
	            var newX = this.coords.x - this.grabPoint.x;
           		var newY = this.coords.y - this.grabPoint.y;
	            this.dragElement.setAttributeNS(null, 'transform', 'translate(' + newX + ',' + newY + ')');
	         }
		},

		/**
		 * Drop the element after mouseup event
		 * @param {Object} evt
		 */
		drop: function(evt){

			if (this.dragElement != null) {

				// Set the selected style
				setAttrs(this.selectedObj, {"fill-opacity": 1});
				
				this.dragElement.setAttributeNS(null, 'pointer-events', 'all');
				this.dragElement = null, this.selectedObj = null;
			} 
		},
		
		/**
		 * Get and set the true coordinates
		 * @param {Object} evt
		 */
		getCoords: function(evt){
			
			var scale = this.root.currentScale, translation = this.root.currentTranslate;
			
			this.coords.x = (evt.clientX - translation.x) / scale;
			this.coords.y = (evt.clientY - translation.y) / scale;
		},

		/** Builds the left menu, buttons and all listeners */
		buildMenu: function(){

			var self = this; this.toggle = false, this.cnt;
			
			this.cnt = new this.Element('g', { 'id': 'leftMenu', 'width':'20%', 'height':'100%' });			
			this.bg = new this.Element('rect',{ "height": "100%", "width": "100%", "x": 0, "y": 0, "fill": "#333"},this.cnt);

			// <-- Rectangle button
			new this.Element('rect',{
				
				"height": "5em",
				"width": "5em",
				"x": ".5em",
				"y": ".5em",
				'stroke': 'red',
				"fill": "#ddd",
				"id": "rectBtn"
				
			}, this.cnt).addEventListener('click',function(evt){
				
				if (self.selectedObj) {
					setAttrs(self.selectedObj, {
						'stroke': 'red'
					});
				}
				// Select the object
				self.selectedObj = 'rect';
				setAttrs(this, {"stroke": "yellow"});
				
			},false);		
			// -->

			// <-- Circle button
			new this.Element('circle', {
				"r": "2.5em",
				"cx": "9.5em",
				"cy": "3em",
				"fill": "#ddd",
				"fill-opacity": 0.85,
				"stroke": "red",
				"stroke-opacity": 0.85,
				"id": this.toString()
				
			}, this.cnt).addEventListener('click',function(evt){
				
				if (self.selectedObj) {
					setAttrs(self.selectedObj, { 'stroke': 'red' });
				}
				// Select the object
				self.selectedObj = 'circle';
				setAttrs(this, { "stroke": "yellow" });
				
			},false);	
			// -->

			new this.Element('rect',{
				
				"height": "100%",
				"width": ".3%",
				"x": "14.7%",
				"y": 0,
				"fill": "#222",
				"id": "toggle"
				
			},this.cnt).addEventListener('click',function(){ 
			
				setAttrs(self.cnt,{'style':'-15%'});
	
			},false);
		},
	
		/**
		 * Creates and append an element
		 * @param {String} element
		 * @param {Object} attrs
		 * @param {Object} target (Optional)
		 */
		Element: function(element, attrs){

		    var el = $e(element);
		    setAttrs(el, attrs);
		    arguments[2] ? arguments[2].appendChild(el) : JSVG.root.appendChild(el);
			
			return el;
		}
	}
	
	new JSVG()
	
	]]>
</script>
</svg>